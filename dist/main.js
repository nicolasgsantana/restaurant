/*! For license information please see main.js.LICENSE.txt */
(()=>{var e={16:(e,t,n)=>{"use strict";n.d(t,{A:()=>C});var o=n(354),r=n.n(o),a=n(314),i=n.n(a),l=n(417),c=n.n(l),s=new URL(n(909),n.b),d=new URL(n(53),n.b),m=new URL(n(874),n.b),p=new URL(n(832),n.b),u=i()(r());u.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Roboto&display=swap);"]);var A=c()(s),f=c()(d),h=c()(m),g=c()(p);u.push([e.id,`@font-face {\n    font-family: 'Norse';\n    src: \n    url(${A}) format('woff2'),\n    url(${f}) format('woff');\n}\n\n* {\n    margin: 0;\n    padding: 0;\n}\n\n:root {\n    --bg-color: #000500; \n    --text-color: #f8f9fa;\n    --focus-color: #6B7FD7;\n    --icon-color: #69353F;\n\n    --title-font: 'Norse', fantasy;\n\n    font-family: 'Roboto', sans-serif;\n    color: var(--text-color);\n}\n\nheader {\n    padding: 8px;\n    font-family: var(--title-font);\n\n    display: flex;\n    align-items: center;\n\n    background-color: var(--bg-color);\n\n    border-bottom: 4px solid var(--text-color);\n}\n\nheader svg {\n    height: 5rem;\n    fill: var(--text-color);\n}\n\nheader h1 {\n    font-size: 4rem;\n    margin-right: auto;\n    margin-left: 8px;\n}\n\nheader button {\n    background: none;\n    border: none;\n\n    font-family: inherit;\n    font-size: 2.5rem;\n    color: var(--text-color);\n}\nheader button:hover {\n    color: var(--focus-color);\n}\n\nheader button:active {\n    filter: brightness(85%);\n}\n\nheader nav {\n    display: flex;\n    gap: 1rem;\n    padding-right: 1rem;\n}\n\n.hero {\n    background: url(${h}) no-repeat center center fixed;\n    background-size: cover;\n    height: 100vh;\n}\n\n.hero div {\n    height: 100%;\n    width: 100%;\n    background-color: rgba(0, 0, 0, 0.6);\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n\n.hero h1 {\n    padding-left: 3rem;\n    font-size: 5rem;\n    font-family: var(--title-font)\n}\n\n.hero p {\n    max-width: 70ch;\n\n    font-size: 1.2rem;\n    font-style: italic;\n\n    padding-left: 5rem;\n    padding-top: 0.5rem;\n}\n\n.info {\n    background-color: var(--text-color);\n    color: var(--bg-color);\n\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: repeat(3, min-content);\n    justify-items: center;\n    align-items: center;\n    gap: 4rem;\n\n    padding: 2rem;\n}\n\n.info h1 {\n    grid-column: 1 / 3;\n\n    font-family: var(--title-font);\n    font-size: 4rem;\n}\n\n.info h2 {\n    font-family: var(--title-font);\n    font-size: 2.5rem;\n    color: var(--bg-color);\n}\n\n.info p {\n    max-width: 40ch;\n    padding-left: 3rem;\n    font-size: 1.5rem;\n    margin-top: 1rem;\n}\n\n.info svg {\n    height: 3rem;\n    fill: var(--bg-color);\n}\n\n.title {\n    display: flex;\n    align-items: center;\n}\n\n.menu {\n    color: var(--bg-color);\n    background-color: var(--text-color);\n\n    display: flex;\n    flex-direction: column;\n    gap: 2rem;\n    padding: 2rem;\n}\n\n.menu > div{\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n}\n\n.menu > div:nth-child(odd){\n    justify-content: right;\n    text-align: right;\n}\n\n.menu h1, .menu h2 {\n    font-family: 'Norse', fantasy;\n}\n\n.menu h1{\n    font-size: 4rem;\n    text-align: center;\n}\n\n.menu h2{\n    font-size: 2.5rem;\n}\n\n.menu p {\n    margin-top: 0.5rem;\n    font-size: 1.2rem;\n    width: 30ch;\n}\n\n.menu img {\n    height: 350px;\n    box-shadow: -10px 10px 10px 0px rgba(0,0,0,0.5);\n}\n\n.menu > div:nth-child(odd) img{\n    box-shadow: 10px 10px 10px 0px rgba(0,0,0,0.5);\n}\n\n\n\n.about {\n    background: url(${g}) no-repeat center center fixed;\n    background-size: cover;\n    \n}\n\n.about > div {\n    background-color: rgba(0, 0, 0, 0.6);\n}\n\n.text{\n    color: var(--text-color);\n    width: 60ch;\n    margin: 0 auto;\n    padding: 2rem 0;\n}\n\n.about h1, .about h2 {\n    font-family: 'Norse', fantasy;\n}\n\n.about h1 {\n    font-size: 4rem;\n    padding-bottom: 1rem;\n}\n\n.about h2 {\n    font-size: 2rem;\n    padding: 1rem 0;\n}\n\n.about p {\n    font-size: 1.2rem;\n    padding: 0.5rem 0;\n}\n\nfooter {\n    padding: 1rem;\n    font-size: 1.2rem;\n    background-color: var(--bg-color);\n\n    display: flex;\n    justify-content: center;\n    border-top: 4px solid var(--text-color);\n}\n\nfooter a {\n    color: var(--text-color);\n    text-decoration: none;\n}\n\nfooter a:hover{\n    text-decoration: underline;\n}\n`,"",{version:3,sources:["webpack://./src/css/style.css"],names:[],mappings:"AAEA;IACI,oBAAoB;IACpB;;0DAE6C;AACjD;;AAEA;IACI,SAAS;IACT,UAAU;AACd;;AAEA;IACI,mBAAmB;IACnB,qBAAqB;IACrB,sBAAsB;IACtB,qBAAqB;;IAErB,8BAA8B;;IAE9B,iCAAiC;IACjC,wBAAwB;AAC5B;;AAEA;IACI,YAAY;IACZ,8BAA8B;;IAE9B,aAAa;IACb,mBAAmB;;IAEnB,iCAAiC;;IAEjC,0CAA0C;AAC9C;;AAEA;IACI,YAAY;IACZ,uBAAuB;AAC3B;;AAEA;IACI,eAAe;IACf,kBAAkB;IAClB,gBAAgB;AACpB;;AAEA;IACI,gBAAgB;IAChB,YAAY;;IAEZ,oBAAoB;IACpB,iBAAiB;IACjB,wBAAwB;AAC5B;AACA;IACI,yBAAyB;AAC7B;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,aAAa;IACb,SAAS;IACT,mBAAmB;AACvB;;AAEA;IACI,iFAAiE;IACjE,sBAAsB;IACtB,aAAa;AACjB;;AAEA;IACI,YAAY;IACZ,WAAW;IACX,oCAAoC;;IAEpC,aAAa;IACb,sBAAsB;IACtB,uBAAuB;AAC3B;;AAEA;IACI,kBAAkB;IAClB,eAAe;IACf;AACJ;;AAEA;IACI,eAAe;;IAEf,iBAAiB;IACjB,kBAAkB;;IAElB,kBAAkB;IAClB,mBAAmB;AACvB;;AAEA;IACI,mCAAmC;IACnC,sBAAsB;;IAEtB,aAAa;IACb,8BAA8B;IAC9B,0CAA0C;IAC1C,qBAAqB;IACrB,mBAAmB;IACnB,SAAS;;IAET,aAAa;AACjB;;AAEA;IACI,kBAAkB;;IAElB,8BAA8B;IAC9B,eAAe;AACnB;;AAEA;IACI,8BAA8B;IAC9B,iBAAiB;IACjB,sBAAsB;AAC1B;;AAEA;IACI,eAAe;IACf,kBAAkB;IAClB,iBAAiB;IACjB,gBAAgB;AACpB;;AAEA;IACI,YAAY;IACZ,qBAAqB;AACzB;;AAEA;IACI,aAAa;IACb,mBAAmB;AACvB;;AAEA;IACI,sBAAsB;IACtB,mCAAmC;;IAEnC,aAAa;IACb,sBAAsB;IACtB,SAAS;IACT,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,SAAS;AACb;;AAEA;IACI,sBAAsB;IACtB,iBAAiB;AACrB;;AAEA;IACI,6BAA6B;AACjC;;AAEA;IACI,eAAe;IACf,kBAAkB;AACtB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,kBAAkB;IAClB,iBAAiB;IACjB,WAAW;AACf;;AAEA;IACI,aAAa;IACb,+CAA+C;AACnD;;AAEA;IACI,8CAA8C;AAClD;;;;AAIA;IACI,iFAAkE;IAClE,sBAAsB;;AAE1B;;AAEA;IACI,oCAAoC;AACxC;;AAEA;IACI,wBAAwB;IACxB,WAAW;IACX,cAAc;IACd,eAAe;AACnB;;AAEA;IACI,6BAA6B;AACjC;;AAEA;IACI,eAAe;IACf,oBAAoB;AACxB;;AAEA;IACI,eAAe;IACf,eAAe;AACnB;;AAEA;IACI,iBAAiB;IACjB,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,iBAAiB;IACjB,iCAAiC;;IAEjC,aAAa;IACb,uBAAuB;IACvB,uCAAuC;AAC3C;;AAEA;IACI,wBAAwB;IACxB,qBAAqB;AACzB;;AAEA;IACI,0BAA0B;AAC9B",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Roboto&display=swap');\n\n@font-face {\n    font-family: 'Norse';\n    src: \n    url('../fonts/norsebold.woff2') format('woff2'),\n    url('../fonts/norsebold.woff') format('woff');\n}\n\n* {\n    margin: 0;\n    padding: 0;\n}\n\n:root {\n    --bg-color: #000500; \n    --text-color: #f8f9fa;\n    --focus-color: #6B7FD7;\n    --icon-color: #69353F;\n\n    --title-font: 'Norse', fantasy;\n\n    font-family: 'Roboto', sans-serif;\n    color: var(--text-color);\n}\n\nheader {\n    padding: 8px;\n    font-family: var(--title-font);\n\n    display: flex;\n    align-items: center;\n\n    background-color: var(--bg-color);\n\n    border-bottom: 4px solid var(--text-color);\n}\n\nheader svg {\n    height: 5rem;\n    fill: var(--text-color);\n}\n\nheader h1 {\n    font-size: 4rem;\n    margin-right: auto;\n    margin-left: 8px;\n}\n\nheader button {\n    background: none;\n    border: none;\n\n    font-family: inherit;\n    font-size: 2.5rem;\n    color: var(--text-color);\n}\nheader button:hover {\n    color: var(--focus-color);\n}\n\nheader button:active {\n    filter: brightness(85%);\n}\n\nheader nav {\n    display: flex;\n    gap: 1rem;\n    padding-right: 1rem;\n}\n\n.hero {\n    background: url(../img/bg/home.jpg) no-repeat center center fixed;\n    background-size: cover;\n    height: 100vh;\n}\n\n.hero div {\n    height: 100%;\n    width: 100%;\n    background-color: rgba(0, 0, 0, 0.6);\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n\n.hero h1 {\n    padding-left: 3rem;\n    font-size: 5rem;\n    font-family: var(--title-font)\n}\n\n.hero p {\n    max-width: 70ch;\n\n    font-size: 1.2rem;\n    font-style: italic;\n\n    padding-left: 5rem;\n    padding-top: 0.5rem;\n}\n\n.info {\n    background-color: var(--text-color);\n    color: var(--bg-color);\n\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: repeat(3, min-content);\n    justify-items: center;\n    align-items: center;\n    gap: 4rem;\n\n    padding: 2rem;\n}\n\n.info h1 {\n    grid-column: 1 / 3;\n\n    font-family: var(--title-font);\n    font-size: 4rem;\n}\n\n.info h2 {\n    font-family: var(--title-font);\n    font-size: 2.5rem;\n    color: var(--bg-color);\n}\n\n.info p {\n    max-width: 40ch;\n    padding-left: 3rem;\n    font-size: 1.5rem;\n    margin-top: 1rem;\n}\n\n.info svg {\n    height: 3rem;\n    fill: var(--bg-color);\n}\n\n.title {\n    display: flex;\n    align-items: center;\n}\n\n.menu {\n    color: var(--bg-color);\n    background-color: var(--text-color);\n\n    display: flex;\n    flex-direction: column;\n    gap: 2rem;\n    padding: 2rem;\n}\n\n.menu > div{\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n}\n\n.menu > div:nth-child(odd){\n    justify-content: right;\n    text-align: right;\n}\n\n.menu h1, .menu h2 {\n    font-family: 'Norse', fantasy;\n}\n\n.menu h1{\n    font-size: 4rem;\n    text-align: center;\n}\n\n.menu h2{\n    font-size: 2.5rem;\n}\n\n.menu p {\n    margin-top: 0.5rem;\n    font-size: 1.2rem;\n    width: 30ch;\n}\n\n.menu img {\n    height: 350px;\n    box-shadow: -10px 10px 10px 0px rgba(0,0,0,0.5);\n}\n\n.menu > div:nth-child(odd) img{\n    box-shadow: 10px 10px 10px 0px rgba(0,0,0,0.5);\n}\n\n\n\n.about {\n    background: url(../img/bg/about.jpg) no-repeat center center fixed;\n    background-size: cover;\n    \n}\n\n.about > div {\n    background-color: rgba(0, 0, 0, 0.6);\n}\n\n.text{\n    color: var(--text-color);\n    width: 60ch;\n    margin: 0 auto;\n    padding: 2rem 0;\n}\n\n.about h1, .about h2 {\n    font-family: 'Norse', fantasy;\n}\n\n.about h1 {\n    font-size: 4rem;\n    padding-bottom: 1rem;\n}\n\n.about h2 {\n    font-size: 2rem;\n    padding: 1rem 0;\n}\n\n.about p {\n    font-size: 1.2rem;\n    padding: 0.5rem 0;\n}\n\nfooter {\n    padding: 1rem;\n    font-size: 1.2rem;\n    background-color: var(--bg-color);\n\n    display: flex;\n    justify-content: center;\n    border-top: 4px solid var(--text-color);\n}\n\nfooter a {\n    color: var(--text-color);\n    text-decoration: none;\n}\n\nfooter a:hover{\n    text-decoration: underline;\n}\n"],sourceRoot:""}]);const C=u},314:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,r,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(o)for(var l=0;l<this.length;l++){var c=this[l][0];null!=c&&(i[c]=!0)}for(var s=0;s<e.length;s++){var d=[].concat(e[s]);o&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),t.push(d))}},t}},417:e=>{"use strict";e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},354:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},838:function(e){e.exports=function(){"use strict";const{entries:e,setPrototypeOf:t,isFrozen:n,getPrototypeOf:o,getOwnPropertyDescriptor:r}=Object;let{freeze:a,seal:i,create:l}=Object,{apply:c,construct:s}="undefined"!=typeof Reflect&&Reflect;a||(a=function(e){return e}),i||(i=function(e){return e}),c||(c=function(e,t,n){return e.apply(t,n)}),s||(s=function(e,t){return new e(...t)});const d=x(Array.prototype.forEach),m=x(Array.prototype.pop),p=x(Array.prototype.push),u=x(String.prototype.toLowerCase),A=x(String.prototype.toString),f=x(String.prototype.match),h=x(String.prototype.replace),g=x(String.prototype.indexOf),C=x(String.prototype.trim),b=x(Object.prototype.hasOwnProperty),y=x(RegExp.prototype.test),v=(E=TypeError,function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return s(E,t)});var E;function x(e){return function(t){for(var n=arguments.length,o=new Array(n>1?n-1:0),r=1;r<n;r++)o[r-1]=arguments[r];return c(e,t,o)}}function I(e,o){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:u;t&&t(e,null);let a=o.length;for(;a--;){let t=o[a];if("string"==typeof t){const e=r(t);e!==t&&(n(o)||(o[a]=e),t=e)}e[t]=!0}return e}function B(e){for(let t=0;t<e.length;t++)b(e,t)||(e[t]=null);return e}function w(t){const n=l(null);for(const[o,r]of e(t))b(t,o)&&(Array.isArray(r)?n[o]=B(r):r&&"object"==typeof r&&r.constructor===Object?n[o]=w(r):n[o]=r);return n}function T(e,t){for(;null!==e;){const n=r(e,t);if(n){if(n.get)return x(n.get);if("function"==typeof n.value)return x(n.value)}e=o(e)}return function(){return null}}const k=a(["a","abbr","acronym","address","area","article","aside","audio","b","bdi","bdo","big","blink","blockquote","body","br","button","canvas","caption","center","cite","code","col","colgroup","content","data","datalist","dd","decorator","del","details","dfn","dialog","dir","div","dl","dt","element","em","fieldset","figcaption","figure","font","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","img","input","ins","kbd","label","legend","li","main","map","mark","marquee","menu","menuitem","meter","nav","nobr","ol","optgroup","option","output","p","picture","pre","progress","q","rp","rt","ruby","s","samp","section","select","shadow","small","source","spacer","span","strike","strong","style","sub","summary","sup","table","tbody","td","template","textarea","tfoot","th","thead","time","tr","track","tt","u","ul","var","video","wbr"]),L=a(["svg","a","altglyph","altglyphdef","altglyphitem","animatecolor","animatemotion","animatetransform","circle","clippath","defs","desc","ellipse","filter","font","g","glyph","glyphref","hkern","image","line","lineargradient","marker","mask","metadata","mpath","path","pattern","polygon","polyline","radialgradient","rect","stop","style","switch","symbol","text","textpath","title","tref","tspan","view","vkern"]),S=a(["feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feDropShadow","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence"]),N=a(["animate","color-profile","cursor","discard","font-face","font-face-format","font-face-name","font-face-src","font-face-uri","foreignobject","hatch","hatchpath","mesh","meshgradient","meshpatch","meshrow","missing-glyph","script","set","solidcolor","unknown","use"]),_=a(["math","menclose","merror","mfenced","mfrac","mglyph","mi","mlabeledtr","mmultiscripts","mn","mo","mover","mpadded","mphantom","mroot","mrow","ms","mspace","msqrt","mstyle","msub","msup","msubsup","mtable","mtd","mtext","mtr","munder","munderover","mprescripts"]),R=a(["maction","maligngroup","malignmark","mlongdiv","mscarries","mscarry","msgroup","mstack","msline","msrow","semantics","annotation","annotation-xml","mprescripts","none"]),M=a(["#text"]),D=a(["accept","action","align","alt","autocapitalize","autocomplete","autopictureinpicture","autoplay","background","bgcolor","border","capture","cellpadding","cellspacing","checked","cite","class","clear","color","cols","colspan","controls","controlslist","coords","crossorigin","datetime","decoding","default","dir","disabled","disablepictureinpicture","disableremoteplayback","download","draggable","enctype","enterkeyhint","face","for","headers","height","hidden","high","href","hreflang","id","inputmode","integrity","ismap","kind","label","lang","list","loading","loop","low","max","maxlength","media","method","min","minlength","multiple","muted","name","nonce","noshade","novalidate","nowrap","open","optimum","pattern","placeholder","playsinline","poster","preload","pubdate","radiogroup","readonly","rel","required","rev","reversed","role","rows","rowspan","spellcheck","scope","selected","shape","size","sizes","span","srclang","start","src","srcset","step","style","summary","tabindex","title","translate","type","usemap","valign","value","width","xmlns","slot"]),O=a(["accent-height","accumulate","additive","alignment-baseline","ascent","attributename","attributetype","azimuth","basefrequency","baseline-shift","begin","bias","by","class","clip","clippathunits","clip-path","clip-rule","color","color-interpolation","color-interpolation-filters","color-profile","color-rendering","cx","cy","d","dx","dy","diffuseconstant","direction","display","divisor","dur","edgemode","elevation","end","fill","fill-opacity","fill-rule","filter","filterunits","flood-color","flood-opacity","font-family","font-size","font-size-adjust","font-stretch","font-style","font-variant","font-weight","fx","fy","g1","g2","glyph-name","glyphref","gradientunits","gradienttransform","height","href","id","image-rendering","in","in2","k","k1","k2","k3","k4","kerning","keypoints","keysplines","keytimes","lang","lengthadjust","letter-spacing","kernelmatrix","kernelunitlength","lighting-color","local","marker-end","marker-mid","marker-start","markerheight","markerunits","markerwidth","maskcontentunits","maskunits","max","mask","media","method","mode","min","name","numoctaves","offset","operator","opacity","order","orient","orientation","origin","overflow","paint-order","path","pathlength","patterncontentunits","patterntransform","patternunits","points","preservealpha","preserveaspectratio","primitiveunits","r","rx","ry","radius","refx","refy","repeatcount","repeatdur","restart","result","rotate","scale","seed","shape-rendering","specularconstant","specularexponent","spreadmethod","startoffset","stddeviation","stitchtiles","stop-color","stop-opacity","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke","stroke-width","style","surfacescale","systemlanguage","tabindex","targetx","targety","transform","transform-origin","text-anchor","text-decoration","text-rendering","textlength","type","u1","u2","unicode","values","viewbox","visibility","version","vert-adv-y","vert-origin-x","vert-origin-y","width","word-spacing","wrap","writing-mode","xchannelselector","ychannelselector","x","x1","x2","xmlns","y","y1","y2","z","zoomandpan"]),z=a(["accent","accentunder","align","bevelled","close","columnsalign","columnlines","columnspan","denomalign","depth","dir","display","displaystyle","encoding","fence","frame","height","href","id","largeop","length","linethickness","lspace","lquote","mathbackground","mathcolor","mathsize","mathvariant","maxsize","minsize","movablelimits","notation","numalign","open","rowalign","rowlines","rowspacing","rowspan","rspace","rquote","scriptlevel","scriptminsize","scriptsizemultiplier","selection","separator","separators","stretchy","subscriptshift","supscriptshift","symmetric","voffset","width","xmlns"]),j=a(["xlink:href","xml:id","xlink:title","xml:space","xmlns:xlink"]),U=i(/\{\{[\w\W]*|[\w\W]*\}\}/gm),H=i(/<%[\w\W]*|[\w\W]*%>/gm),P=i(/\${[\w\W]*}/gm),F=i(/^data-[\-\w.\u00B7-\uFFFF]/),W=i(/^aria-[\-\w]+$/),V=i(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|sms|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i),Y=i(/^(?:\w+script|data):/i),G=i(/[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205F\u3000]/g),q=i(/^html$/i);var $=Object.freeze({__proto__:null,MUSTACHE_EXPR:U,ERB_EXPR:H,TMPLIT_EXPR:P,DATA_ATTR:F,ARIA_ATTR:W,IS_ALLOWED_URI:V,IS_SCRIPT_OR_DATA:Y,ATTR_WHITESPACE:G,DOCTYPE_NAME:q});const Z=function(){return"undefined"==typeof window?null:window};return function t(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Z();const o=e=>t(e);if(o.version="3.0.9",o.removed=[],!n||!n.document||9!==n.document.nodeType)return o.isSupported=!1,o;let{document:r}=n;const i=r,c=i.currentScript,{DocumentFragment:s,HTMLTemplateElement:E,Node:x,Element:B,NodeFilter:U,NamedNodeMap:H=n.NamedNodeMap||n.MozNamedAttrMap,HTMLFormElement:P,DOMParser:F,trustedTypes:W}=n,Y=B.prototype,G=T(Y,"cloneNode"),X=T(Y,"nextSibling"),J=T(Y,"childNodes"),K=T(Y,"parentNode");if("function"==typeof E){const e=r.createElement("template");e.content&&e.content.ownerDocument&&(r=e.content.ownerDocument)}let Q,ee="";const{implementation:te,createNodeIterator:ne,createDocumentFragment:oe,getElementsByTagName:re}=r,{importNode:ae}=i;let ie={};o.isSupported="function"==typeof e&&"function"==typeof K&&te&&void 0!==te.createHTMLDocument;const{MUSTACHE_EXPR:le,ERB_EXPR:ce,TMPLIT_EXPR:se,DATA_ATTR:de,ARIA_ATTR:me,IS_SCRIPT_OR_DATA:pe,ATTR_WHITESPACE:ue}=$;let{IS_ALLOWED_URI:Ae}=$,fe=null;const he=I({},[...k,...L,...S,..._,...M]);let ge=null;const Ce=I({},[...D,...O,...z,...j]);let be=Object.seal(l(null,{tagNameCheck:{writable:!0,configurable:!1,enumerable:!0,value:null},attributeNameCheck:{writable:!0,configurable:!1,enumerable:!0,value:null},allowCustomizedBuiltInElements:{writable:!0,configurable:!1,enumerable:!0,value:!1}})),ye=null,ve=null,Ee=!0,xe=!0,Ie=!1,Be=!0,we=!1,Te=!1,ke=!1,Le=!1,Se=!1,Ne=!1,_e=!1,Re=!0,Me=!1,De=!0,Oe=!1,ze={},je=null;const Ue=I({},["annotation-xml","audio","colgroup","desc","foreignobject","head","iframe","math","mi","mn","mo","ms","mtext","noembed","noframes","noscript","plaintext","script","style","svg","template","thead","title","video","xmp"]);let He=null;const Pe=I({},["audio","video","img","source","image","track"]);let Fe=null;const We=I({},["alt","class","for","id","label","name","pattern","placeholder","role","summary","title","value","style","xmlns"]),Ve="http://www.w3.org/1998/Math/MathML",Ye="http://www.w3.org/2000/svg",Ge="http://www.w3.org/1999/xhtml";let qe=Ge,$e=!1,Ze=null;const Xe=I({},[Ve,Ye,Ge],A);let Je=null;const Ke=["application/xhtml+xml","text/html"];let Qe=null,et=null;const tt=r.createElement("form"),nt=function(e){return e instanceof RegExp||e instanceof Function},ot=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(!et||et!==e){if(e&&"object"==typeof e||(e={}),e=w(e),Je=-1===Ke.indexOf(e.PARSER_MEDIA_TYPE)?"text/html":e.PARSER_MEDIA_TYPE,Qe="application/xhtml+xml"===Je?A:u,fe=b(e,"ALLOWED_TAGS")?I({},e.ALLOWED_TAGS,Qe):he,ge=b(e,"ALLOWED_ATTR")?I({},e.ALLOWED_ATTR,Qe):Ce,Ze=b(e,"ALLOWED_NAMESPACES")?I({},e.ALLOWED_NAMESPACES,A):Xe,Fe=b(e,"ADD_URI_SAFE_ATTR")?I(w(We),e.ADD_URI_SAFE_ATTR,Qe):We,He=b(e,"ADD_DATA_URI_TAGS")?I(w(Pe),e.ADD_DATA_URI_TAGS,Qe):Pe,je=b(e,"FORBID_CONTENTS")?I({},e.FORBID_CONTENTS,Qe):Ue,ye=b(e,"FORBID_TAGS")?I({},e.FORBID_TAGS,Qe):{},ve=b(e,"FORBID_ATTR")?I({},e.FORBID_ATTR,Qe):{},ze=!!b(e,"USE_PROFILES")&&e.USE_PROFILES,Ee=!1!==e.ALLOW_ARIA_ATTR,xe=!1!==e.ALLOW_DATA_ATTR,Ie=e.ALLOW_UNKNOWN_PROTOCOLS||!1,Be=!1!==e.ALLOW_SELF_CLOSE_IN_ATTR,we=e.SAFE_FOR_TEMPLATES||!1,Te=e.WHOLE_DOCUMENT||!1,Se=e.RETURN_DOM||!1,Ne=e.RETURN_DOM_FRAGMENT||!1,_e=e.RETURN_TRUSTED_TYPE||!1,Le=e.FORCE_BODY||!1,Re=!1!==e.SANITIZE_DOM,Me=e.SANITIZE_NAMED_PROPS||!1,De=!1!==e.KEEP_CONTENT,Oe=e.IN_PLACE||!1,Ae=e.ALLOWED_URI_REGEXP||V,qe=e.NAMESPACE||Ge,be=e.CUSTOM_ELEMENT_HANDLING||{},e.CUSTOM_ELEMENT_HANDLING&&nt(e.CUSTOM_ELEMENT_HANDLING.tagNameCheck)&&(be.tagNameCheck=e.CUSTOM_ELEMENT_HANDLING.tagNameCheck),e.CUSTOM_ELEMENT_HANDLING&&nt(e.CUSTOM_ELEMENT_HANDLING.attributeNameCheck)&&(be.attributeNameCheck=e.CUSTOM_ELEMENT_HANDLING.attributeNameCheck),e.CUSTOM_ELEMENT_HANDLING&&"boolean"==typeof e.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements&&(be.allowCustomizedBuiltInElements=e.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements),we&&(xe=!1),Ne&&(Se=!0),ze&&(fe=I({},M),ge=[],!0===ze.html&&(I(fe,k),I(ge,D)),!0===ze.svg&&(I(fe,L),I(ge,O),I(ge,j)),!0===ze.svgFilters&&(I(fe,S),I(ge,O),I(ge,j)),!0===ze.mathMl&&(I(fe,_),I(ge,z),I(ge,j))),e.ADD_TAGS&&(fe===he&&(fe=w(fe)),I(fe,e.ADD_TAGS,Qe)),e.ADD_ATTR&&(ge===Ce&&(ge=w(ge)),I(ge,e.ADD_ATTR,Qe)),e.ADD_URI_SAFE_ATTR&&I(Fe,e.ADD_URI_SAFE_ATTR,Qe),e.FORBID_CONTENTS&&(je===Ue&&(je=w(je)),I(je,e.FORBID_CONTENTS,Qe)),De&&(fe["#text"]=!0),Te&&I(fe,["html","head","body"]),fe.table&&(I(fe,["tbody"]),delete ye.tbody),e.TRUSTED_TYPES_POLICY){if("function"!=typeof e.TRUSTED_TYPES_POLICY.createHTML)throw v('TRUSTED_TYPES_POLICY configuration option must provide a "createHTML" hook.');if("function"!=typeof e.TRUSTED_TYPES_POLICY.createScriptURL)throw v('TRUSTED_TYPES_POLICY configuration option must provide a "createScriptURL" hook.');Q=e.TRUSTED_TYPES_POLICY,ee=Q.createHTML("")}else void 0===Q&&(Q=function(e,t){if("object"!=typeof e||"function"!=typeof e.createPolicy)return null;let n=null;const o="data-tt-policy-suffix";t&&t.hasAttribute(o)&&(n=t.getAttribute(o));const r="dompurify"+(n?"#"+n:"");try{return e.createPolicy(r,{createHTML:e=>e,createScriptURL:e=>e})}catch(e){return console.warn("TrustedTypes policy "+r+" could not be created."),null}}(W,c)),null!==Q&&"string"==typeof ee&&(ee=Q.createHTML(""));a&&a(e),et=e}},rt=I({},["mi","mo","mn","ms","mtext"]),at=I({},["foreignobject","desc","title","annotation-xml"]),it=I({},["title","style","font","a","script"]),lt=I({},[...L,...S,...N]),ct=I({},[..._,...R]),st=function(e){p(o.removed,{element:e});try{e.parentNode.removeChild(e)}catch(t){e.remove()}},dt=function(e,t){try{p(o.removed,{attribute:t.getAttributeNode(e),from:t})}catch(e){p(o.removed,{attribute:null,from:t})}if(t.removeAttribute(e),"is"===e&&!ge[e])if(Se||Ne)try{st(t)}catch(e){}else try{t.setAttribute(e,"")}catch(e){}},mt=function(e){let t=null,n=null;if(Le)e="<remove></remove>"+e;else{const t=f(e,/^[\r\n\t ]+/);n=t&&t[0]}"application/xhtml+xml"===Je&&qe===Ge&&(e='<html xmlns="http://www.w3.org/1999/xhtml"><head></head><body>'+e+"</body></html>");const o=Q?Q.createHTML(e):e;if(qe===Ge)try{t=(new F).parseFromString(o,Je)}catch(e){}if(!t||!t.documentElement){t=te.createDocument(qe,"template",null);try{t.documentElement.innerHTML=$e?ee:o}catch(e){}}const a=t.body||t.documentElement;return e&&n&&a.insertBefore(r.createTextNode(n),a.childNodes[0]||null),qe===Ge?re.call(t,Te?"html":"body")[0]:Te?t.documentElement:a},pt=function(e){return ne.call(e.ownerDocument||e,e,U.SHOW_ELEMENT|U.SHOW_COMMENT|U.SHOW_TEXT,null)},ut=function(e){return"function"==typeof x&&e instanceof x},At=function(e,t,n){ie[e]&&d(ie[e],(e=>{e.call(o,t,n,et)}))},ft=function(e){let t=null;if(At("beforeSanitizeElements",e,null),(n=e)instanceof P&&("string"!=typeof n.nodeName||"string"!=typeof n.textContent||"function"!=typeof n.removeChild||!(n.attributes instanceof H)||"function"!=typeof n.removeAttribute||"function"!=typeof n.setAttribute||"string"!=typeof n.namespaceURI||"function"!=typeof n.insertBefore||"function"!=typeof n.hasChildNodes))return st(e),!0;var n;const r=Qe(e.nodeName);if(At("uponSanitizeElement",e,{tagName:r,allowedTags:fe}),e.hasChildNodes()&&!ut(e.firstElementChild)&&y(/<[/\w]/g,e.innerHTML)&&y(/<[/\w]/g,e.textContent))return st(e),!0;if(!fe[r]||ye[r]){if(!ye[r]&&gt(r)){if(be.tagNameCheck instanceof RegExp&&y(be.tagNameCheck,r))return!1;if(be.tagNameCheck instanceof Function&&be.tagNameCheck(r))return!1}if(De&&!je[r]){const t=K(e)||e.parentNode,n=J(e)||e.childNodes;if(n&&t)for(let o=n.length-1;o>=0;--o)t.insertBefore(G(n[o],!0),X(e))}return st(e),!0}return e instanceof B&&!function(e){let t=K(e);t&&t.tagName||(t={namespaceURI:qe,tagName:"template"});const n=u(e.tagName),o=u(t.tagName);return!!Ze[e.namespaceURI]&&(e.namespaceURI===Ye?t.namespaceURI===Ge?"svg"===n:t.namespaceURI===Ve?"svg"===n&&("annotation-xml"===o||rt[o]):Boolean(lt[n]):e.namespaceURI===Ve?t.namespaceURI===Ge?"math"===n:t.namespaceURI===Ye?"math"===n&&at[o]:Boolean(ct[n]):e.namespaceURI===Ge?!(t.namespaceURI===Ye&&!at[o])&&!(t.namespaceURI===Ve&&!rt[o])&&!ct[n]&&(it[n]||!lt[n]):!("application/xhtml+xml"!==Je||!Ze[e.namespaceURI]))}(e)?(st(e),!0):"noscript"!==r&&"noembed"!==r&&"noframes"!==r||!y(/<\/no(script|embed|frames)/i,e.innerHTML)?(we&&3===e.nodeType&&(t=e.textContent,d([le,ce,se],(e=>{t=h(t,e," ")})),e.textContent!==t&&(p(o.removed,{element:e.cloneNode()}),e.textContent=t)),At("afterSanitizeElements",e,null),!1):(st(e),!0)},ht=function(e,t,n){if(Re&&("id"===t||"name"===t)&&(n in r||n in tt))return!1;if(xe&&!ve[t]&&y(de,t));else if(Ee&&y(me,t));else if(!ge[t]||ve[t]){if(!(gt(e)&&(be.tagNameCheck instanceof RegExp&&y(be.tagNameCheck,e)||be.tagNameCheck instanceof Function&&be.tagNameCheck(e))&&(be.attributeNameCheck instanceof RegExp&&y(be.attributeNameCheck,t)||be.attributeNameCheck instanceof Function&&be.attributeNameCheck(t))||"is"===t&&be.allowCustomizedBuiltInElements&&(be.tagNameCheck instanceof RegExp&&y(be.tagNameCheck,n)||be.tagNameCheck instanceof Function&&be.tagNameCheck(n))))return!1}else if(Fe[t]);else if(y(Ae,h(n,ue,"")));else if("src"!==t&&"xlink:href"!==t&&"href"!==t||"script"===e||0!==g(n,"data:")||!He[e])if(Ie&&!y(pe,h(n,ue,"")));else if(n)return!1;return!0},gt=function(e){return"annotation-xml"!==e&&e.indexOf("-")>0},Ct=function(e){At("beforeSanitizeAttributes",e,null);const{attributes:t}=e;if(!t)return;const n={attrName:"",attrValue:"",keepAttr:!0,allowedAttributes:ge};let r=t.length;for(;r--;){const a=t[r],{name:i,namespaceURI:l,value:c}=a,s=Qe(i);let p="value"===i?c:C(c);if(n.attrName=s,n.attrValue=p,n.keepAttr=!0,n.forceKeepAttr=void 0,At("uponSanitizeAttribute",e,n),p=n.attrValue,n.forceKeepAttr)continue;if(dt(i,e),!n.keepAttr)continue;if(!Be&&y(/\/>/i,p)){dt(i,e);continue}we&&d([le,ce,se],(e=>{p=h(p,e," ")}));const u=Qe(e.nodeName);if(ht(u,s,p)){if(!Me||"id"!==s&&"name"!==s||(dt(i,e),p="user-content-"+p),Q&&"object"==typeof W&&"function"==typeof W.getAttributeType)if(l);else switch(W.getAttributeType(u,s)){case"TrustedHTML":p=Q.createHTML(p);break;case"TrustedScriptURL":p=Q.createScriptURL(p)}try{l?e.setAttributeNS(l,i,p):e.setAttribute(i,p),m(o.removed)}catch(e){}}}At("afterSanitizeAttributes",e,null)},bt=function e(t){let n=null;const o=pt(t);for(At("beforeSanitizeShadowDOM",t,null);n=o.nextNode();)At("uponSanitizeShadowNode",n,null),ft(n)||(n.content instanceof s&&e(n.content),Ct(n));At("afterSanitizeShadowDOM",t,null)};return o.sanitize=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=null,r=null,a=null,l=null;if($e=!e,$e&&(e="\x3c!--\x3e"),"string"!=typeof e&&!ut(e)){if("function"!=typeof e.toString)throw v("toString is not a function");if("string"!=typeof(e=e.toString()))throw v("dirty is not a string, aborting")}if(!o.isSupported)return e;if(ke||ot(t),o.removed=[],"string"==typeof e&&(Oe=!1),Oe){if(e.nodeName){const t=Qe(e.nodeName);if(!fe[t]||ye[t])throw v("root node is forbidden and cannot be sanitized in-place")}}else if(e instanceof x)n=mt("\x3c!----\x3e"),r=n.ownerDocument.importNode(e,!0),1===r.nodeType&&"BODY"===r.nodeName||"HTML"===r.nodeName?n=r:n.appendChild(r);else{if(!Se&&!we&&!Te&&-1===e.indexOf("<"))return Q&&_e?Q.createHTML(e):e;if(n=mt(e),!n)return Se?null:_e?ee:""}n&&Le&&st(n.firstChild);const c=pt(Oe?e:n);for(;a=c.nextNode();)ft(a)||(a.content instanceof s&&bt(a.content),Ct(a));if(Oe)return e;if(Se){if(Ne)for(l=oe.call(n.ownerDocument);n.firstChild;)l.appendChild(n.firstChild);else l=n;return(ge.shadowroot||ge.shadowrootmode)&&(l=ae.call(i,l,!0)),l}let m=Te?n.outerHTML:n.innerHTML;return Te&&fe["!doctype"]&&n.ownerDocument&&n.ownerDocument.doctype&&n.ownerDocument.doctype.name&&y(q,n.ownerDocument.doctype.name)&&(m="<!DOCTYPE "+n.ownerDocument.doctype.name+">\n"+m),we&&d([le,ce,se],(e=>{m=h(m,e," ")})),Q&&_e?Q.createHTML(m):m},o.setConfig=function(){ot(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}),ke=!0},o.clearConfig=function(){et=null,ke=!1},o.isValidAttribute=function(e,t,n){et||ot({});const o=Qe(e),r=Qe(t);return ht(o,r,n)},o.addHook=function(e,t){"function"==typeof t&&(ie[e]=ie[e]||[],p(ie[e],t))},o.removeHook=function(e){if(ie[e])return m(ie[e])},o.removeHooks=function(e){ie[e]&&(ie[e]=[])},o.removeAllHooks=function(){ie={}},o}()}()},72:e=>{"use strict";var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var a={},i=[],l=0;l<e.length;l++){var c=e[l],s=o.base?c[0]+o.base:c[0],d=a[s]||0,m="".concat(s," ").concat(d);a[s]=d+1;var p=n(m),u={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)t[p].references++,t[p].updater(u);else{var A=r(u,o);o.byIndex=l,t.splice(l,0,{identifier:m,updater:A,references:1})}i.push(m)}return i}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var a=o(e=e||[],r=r||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var l=n(a[i]);t[l].references--}for(var c=o(e,r),s=0;s<a.length;s++){var d=n(a[s]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}a=c}}},659:e=>{"use strict";var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},540:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},56:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},825:e=>{"use strict";e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},113:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},53:(e,t,n)=>{"use strict";e.exports=n.p+"e4c3f7ef4a07037d4264.woff"},909:(e,t,n)=>{"use strict";e.exports=n.p+"2a07260ca74cb94e2f52.woff2"},832:(e,t,n)=>{"use strict";e.exports=n.p+"5bf680287b14633af35c.jpg"},874:(e,t,n)=>{"use strict";e.exports=n.p+"89d060ba226d80108db1.jpg"}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var a=t[o]={id:o,exports:{}};return e[o].call(a.exports,a,a.exports,n),a.exports}n.m=e,n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var o=t.getElementsByTagName("script");if(o.length)for(var r=o.length-1;r>-1&&(!e||!/^http(s?):/.test(e));)e=o[r--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.b=document.baseURI||self.location.href,n.nc=void 0,(()=>{"use strict";var e=n(72),t=n.n(e),o=n(825),r=n.n(o),a=n(659),i=n.n(a),l=n(56),c=n.n(l),s=n(540),d=n.n(s),m=n(113),p=n.n(m),u=n(16),A={};A.styleTagTransform=p(),A.setAttributes=c(),A.insert=i().bind(null,"head"),A.domAPI=r(),A.insertStyleElement=d(),t()(u.A,A),u.A&&u.A.locals&&u.A.locals;var f=n(838);function h(e){return(0,f.sanitize)(e)}const g=n.p+"a6a797b1b5efa4c1dbcf.jpg",C=n.p+"6f83a41f16aa105a4078.jpg",b=n.p+"df4ff593b62ea38a5895.jpg",y=n.p+"4ed13480b94c7a013c73.jpg",v=n.p+"e69c0c2755c9e8b7e935.jpg",E=n.p+"b32514f10a97f4aa8b4c.jpg",x=n.p+"a727542e8156f6d2dfdc.jpg",I=n.p+"047ae646d8b9982f8db5.jpg",B=n.p+"7703b052813964687c73.jpg",w=n.p+"999aafea387417ea54d9.jpg";const T=document.getElementById("content"),k=document.getElementById("home"),L=document.getElementById("menu"),S=document.getElementById("about"),N={home:null,menu:null,about:null};let _;const R=()=>{T.innerHTML=""},M=()=>{_!==N.home&&(R(),null===N.home&&(N.home=function(){const e=document.createElement("div");return e.appendChild((()=>{const e=document.createElement("h1");e.textContent="Welcome to Valhalla";const t=document.createElement("p");t.textContent="Unwind in the halls of Valhalla with our specially crafted drinks, perfect for celebrating past victories or fueling up for the battles that lie ahead.";const n=document.createElement("div");n.appendChild(e),n.appendChild(t);const o=document.createElement("div");return o.classList.add("hero"),o.appendChild(n),o})()),e.appendChild((()=>{const e=document.createElement("h2");e.textContent="Opening hours";const t=document.createElement("div");t.classList.add("title"),t.insertAdjacentHTML("afterbegin",h('<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M17.75,4.09L15.22,6.03L16.13,9.09L13.5,7.28L10.87,9.09L11.78,6.03L9.25,4.09L12.44,4L13.5,1L14.56,4L17.75,4.09M21.25,11L19.61,12.25L20.2,14.23L18.5,13.06L16.8,14.23L17.39,12.25L15.75,11L17.81,10.95L18.5,9L19.19,10.95L21.25,11M18.97,15.95C19.8,15.87 20.69,17.05 20.16,17.8C19.84,18.25 19.5,18.67 19.08,19.07C15.17,23 8.84,23 4.94,19.07C1.03,15.17 1.03,8.83 4.94,4.93C5.34,4.53 5.76,4.17 6.21,3.85C6.96,3.32 8.14,4.21 8.06,5.04C7.79,7.9 8.75,10.87 10.95,13.06C13.14,15.26 16.1,16.22 18.97,15.95M17.33,17.97C14.5,17.81 11.7,16.64 9.53,14.5C7.36,12.31 6.2,9.5 6.04,6.68C3.23,9.82 3.34,14.64 6.35,17.66C9.37,20.67 14.19,20.78 17.33,17.97Z" /></svg>')),t.appendChild(e);const n=document.createElement("p");n.textContent="Everyday from sunset to sunrise, including holidays.";const o=document.createElement("div");o.appendChild(t),o.appendChild(n);const r=document.createElement("h2");r.textContent="Weekend Specials";const a=document.createElement("div");a.classList.add("title"),a.insertAdjacentHTML("afterbegin",h('<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M7.5,7L5.5,5H18.5L16.5,7M11,13V19H6V21H18V19H13V13L21,5V3H3V5L11,13Z" /></svg>')),a.appendChild(r);const i=document.createElement("p");i.textContent="Indulge in our exclusive weekend drink selection every Friday to Sunday.";const l=document.createElement("div");l.appendChild(a),l.appendChild(i);const c=document.createElement("h2");c.textContent="No Coins Needed";const s=document.createElement("div");s.classList.add("title"),s.insertAdjacentHTML("afterbegin",h('<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M3,4.27L4.28,3L21,19.72L19.73,21L16.06,17.33C15.44,18 14.54,18.55 13.5,18.82V21H10.5V18.82C8.47,18.31 7,16.79 7,15H9C9,16.08 10.37,17 12,17C13.13,17 14.14,16.56 14.65,15.92L11.68,12.95C9.58,12.42 7,11.75 7,9C7,8.77 7,8.55 7.07,8.34L3,4.27M10.5,5.18V3H13.5V5.18C15.53,5.69 17,7.21 17,9H15C15,7.92 13.63,7 12,7C11.63,7 11.28,7.05 10.95,7.13L9.4,5.58L10.5,5.18Z" /></svg>')),s.appendChild(c);const d=document.createElement("p");d.textContent="Immerse yourself in the spirit of Valhalla without worrying about coins.";const m=document.createElement("div");m.appendChild(s),m.appendChild(d);const p=document.createElement("h2");p.textContent="Location";const u=document.createElement("div");u.classList.add("title"),u.insertAdjacentHTML("afterbegin",h('<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12,11.5A2.5,2.5 0 0,1 9.5,9A2.5,2.5 0 0,1 12,6.5A2.5,2.5 0 0,1 14.5,9A2.5,2.5 0 0,1 12,11.5M12,2A7,7 0 0,0 5,9C5,14.25 12,22 12,22C12,22 19,14.25 19,9A7,7 0 0,0 12,2Z" /></svg>')),u.appendChild(p);const A=document.createElement("p");A.textContent="Asgard - Where the legendary meets the contemporary, your gateway to the extraordinary.";const f=document.createElement("div");f.appendChild(u),f.appendChild(A);const g=document.createElement("div");g.classList.add("info");const C=document.createElement("h1");return C.textContent="Info",g.appendChild(C),g.appendChild(o),g.appendChild(l),g.appendChild(m),g.appendChild(f),g})()),e}()),T.appendChild(N.home),_=N.home)};k.addEventListener("click",M),L.addEventListener("click",(()=>{_!==N.menu&&(R(),null===N.menu&&(N.menu=function(){const e=document.createElement("div");return e.appendChild((()=>{const e=document.createElement("h1");e.textContent="Menu";const t=document.createElement("p");t.textContent="In the heart of Asgard, Valhalla beckons. Our menu is a saga of flavors, each drink a chapter in the epic tale of gods and warriors. Skål to a night of legendary indulgence!";const n=document.createElement("div");n.appendChild(e),n.appendChild(t);const o=document.createElement("div");return o.classList.add("hero"),o.style.background=`url(${g}) no-repeat center center fixed`,o.style.backgroundSize="cover",o.appendChild(n),o})()),e.appendChild((()=>{const e=[{imgSrc:C,title:"Mead of the Gods",description:"A classic honey mead, symbolizing the nectar of the gods and a staple for warriors in Valhalla."},{imgSrc:b,title:"Valkyrie's Elixir",description:"A sophisticated cocktail featuring vodka, elderflower liqueur, and a splash of sparkling mead, honoring the powerful Valkyries."},{imgSrc:y,title:"Thor's Hammer Brew",description:"A robust beer with a hint of smokiness, paying homage to the mighty Thor and his legendary hammer."},{imgSrc:v,title:"Odin's Wisdom Whiskey",description:"A rich and bold whiskey blend, representing the wisdom of Odin, the Allfather."},{imgSrc:E,title:"Frost Giant Frostbite",description:"A chilled vodka cocktail infused with mint and blue curaçao, inspired by the frost giants of Norse mythology."},{imgSrc:x,title:"Bifrost Blueberry Bliss",description:"A refreshing blueberry-infused mocktail, named after the mythical rainbow bridge that connects Asgard to the mortal realm."}],t=[{imgSrc:I,title:"Midsummer Night's Dream",description:"A floral gin and tonic with a touch of lavender and citrus, capturing the enchantment of a midsummer night in Asgard."},{imgSrc:B,title:"Sif's Strawberry Surprise",description:"A delightful strawberry and prosecco concoction, celebrating the goddess Sif and her association with fertility."},{imgSrc:w,title:"Loki's Libation",description:"A mischievous blend of rum, pineapple, and a hint of chili, inspired by the trickster god Loki."}],n=document.createElement("div");n.classList.add("menu");const o=document.createElement("h1");o.textContent="Drinks",n.appendChild(o);for(let t=0;t<e.length;t++){const o=document.createElement("div"),r=document.createElement("img");r.src=e[t].imgSrc;const a=document.createElement("div"),i=document.createElement("h2");i.textContent=e[t].title,a.appendChild(i);const l=document.createElement("p");l.textContent=e[t].description,a.appendChild(l),t%2==0?(o.appendChild(r),o.appendChild(a)):(o.appendChild(a),o.appendChild(r)),n.appendChild(o)}const r=document.createElement("h1");r.textContent="Weekend Specials",n.appendChild(r);const a=document.createElement("div");n.appendChild(a);for(let e=0;e<t.length;e++){const o=document.createElement("div"),r=document.createElement("img");r.src=t[e].imgSrc;const a=document.createElement("div"),i=document.createElement("h2");i.textContent=t[e].title,a.appendChild(i);const l=document.createElement("p");l.textContent=t[e].description,a.appendChild(l),e%2==0?(o.appendChild(r),o.appendChild(a)):(o.appendChild(a),o.appendChild(r)),n.appendChild(o)}return n})()),e}()),T.appendChild(N.menu),_=N.menu)})),S.addEventListener("click",(()=>{_!==N.about&&(R(),null===N.about&&(N.about=function(){const e=document.createElement("div");e.classList.add("about");const t=document.createElement("div");e.appendChild(t);const n=document.createElement("div");n.classList.add("text"),t.appendChild(n);const o=document.createElement("h1");o.textContent="About",n.appendChild(o);const r=document.createElement("h2");r.textContent="Unveiling the Legends of Valhalla",n.appendChild(r);const a=document.createElement("p");a.textContent="Welcome to Valhalla, a sanctuary where the echoes of Norse mythology come to life, and the spirit of adventure intertwines with the taste of legend.",n.appendChild(a);const i=document.createElement("h2");i.textContent="Our Story",n.appendChild(i);const l=document.createElement("p");l.textContent="In the heart of Asgard, Valhalla rises as a haven for those seeking more than just a drink - it's a gateway to the realms of gods and warriors. Inspired by the sagas of old, our founders envisioned a place where the rich tapestry of Norse lore would blend seamlessly with the modern-day revelry.",n.appendChild(l);const c=document.createElement("h2");c.textContent="The Experience",n.appendChild(c);const s=document.createElement("p");s.textContent="Step through the towering doors of Valhalla and immerse yourself in an ambiance that echoes the feasts of Asgard. From the flickering light of the hearth to the resounding echoes of laughter, every detail is meticulously crafted to transport you to a mythical world.",n.appendChild(s);const d=document.createElement("h2");d.textContent="The Drinks",n.appendChild(d);const m=document.createElement("p");m.textContent="Our menu is a chronicle of flavors, each drink a homage to the gods and the brave souls who once graced the halls of Valhalla. Whether you're sipping on the honeyed Mead of the Gods or relishing the Valkyrie's Elixir, each libation is a celebration of Norse spirit.",n.appendChild(m);const p=document.createElement("h2");p.textContent="Community and Fellowship",n.appendChild(p);const u=document.createElement("p");u.textContent="At Valhalla, we believe in forging connections and building a community as strong as the bonds in the halls of Valhalla itself. Join us for a night of camaraderie, where stories are shared, and new legends are born.",n.appendChild(u);const A=document.createElement("h2");A.textContent="Visit Us",n.appendChild(A);const f=document.createElement("p");f.textContent="Located in Asgard, Valhalla invites you to embark on a journey through myth and merriment. Come raise your horn, toast to glory, and experience the magic that is Valhalla.",n.appendChild(f);const h=document.createElement("p");return h.textContent="Skål to new beginnings and timeless tales!",n.appendChild(h),e}()),T.appendChild(N.about),_=N.about)})),M()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,